# --- Slide Set#6 ----
# https://drive.google.com/file/d/1BvOH2oyGHgYeSgJkwPlNmPz9EhAr42i8/view?usp=drive_link

library(tidyverse)
# --- Import treated file ----
library(RCurl)  # for get data from GitHub
# dataset from github
cdr <- read.csv(
    text=getURL("https://raw.githubusercontent.com/kseksan/Credit-Scoring/master/cdrframe.csv"),
    header=TRUE,colClasses=c("timestamp"="character",
                             "callingnum"="factor","callednum"="factor",
                             "location"="factor")
    )

ls()
summary(cdr)
names(cdr)
head(cdr)


# convert df to tibble
cdr <- as_tibble(cdr)



# --- select ----
callerframe <- select(cdr,callingnum, callednum)
names(callerframe)

# --- filter ----

callerframe[1,]
caller1 <- filter(callerframe, callingnum =="0813725657")
summary(caller1)
lengths(caller1)

# --- arrange ----
head(caller1,3)
caller1r <- arrange(caller1,callednum)
head(caller1r,3)

ncalled1 <- n_distinct(caller1$callednum)
ncalled1

# --- pipe operator %>%  ----

exp(5)
5 %>% exp()

cdr %>% is()
caller1 %>% is()
summary(cdr)
cdr %>% select('location')

# --- tibble ----
cdr <- as_tibble(cdr)
cdr

cdr %>% select(callingnum,callednum)
caller1r  # conventional



# --- exercise - practice on  %>% ----
cdr %>% slice(1:3) 
cdr %>% slice(3)

cdr %>% slice(n())
tail(cdr,1)

cdr %>% slice_head(n=2)
cdr %>% slice_tail(n=2)

cdr %>% slice_max(duration,n=3)
cdr %>% slice_min(duration,n=1)

# --- output from  %>% ----

cdr %>% select(callingnum, callednum) -> callerframe_n

callerframe_n

# --- Chain Pipe Operator  %>%  %>%  %>% ----

cdr %>% select(callingnum,callednum) %>% 
    filter(callingnum == "0813725657") %>% 
    select(callednum) %>% 
    n_distinct()


# --- summarize ----
# summarize(.data, ..., .by = NULL, .groups = NULL)

cdr %>% 
    filter(callingnum=="0813725657") %>% 
    summarise(ncallednum = n_distinct(callednum))

cdr %>% 
    filter(callingnum=="0813725657") %>% 
    summarise(nloc = n_distinct(location))

cdr %>% 
    filter(callingnum=="0813725657") %>% 
    summarise(ncallednum = n_distinct(callednum),
              nloc = n_distinct(location))


# --- group_by ----

cdr %>% 
    group_by(callingnum) %>%
    summarise(totalcalls = n(),
              duration = sum(duration),
              num_contact = n_distinct(callednum)
              ) %>%
    head(4)

# --- mutate ----

cdr %>% 
    mutate(date = str_sub(timestamp,1,10)) %>% 
    mutate(date = as_date(date))


cdr %>% 
    mutate(date= str_sub(timestamp,1,10)) %>% 
    group_by(callingnum) %>%
    summarize(totalcalls = n(),
              ncallednum = n_distinct(callednum),
              avg_call = mean(duration),
              nday = n_distinct(date)) %>% 
    mutate(callsperday = totalcalls/nday) %>% 
    select(callingnum,ncallednum,callsperday,avg_call) %>% 
    head(4)



# --- exercise ----
cdr %>% 
    mutate(date= str_sub(timestamp,1,10)) %>% 
    group_by(callingnum) %>%
    summarize(totalcalls = n(),
              ncallednum = n_distinct(callednum),
              sd_call = sd(duration),
              nday = n_distinct(date)) %>% 
    mutate(callsperday = totalcalls/nday) %>% 
    select(callingnum,ncallednum,callsperday,sd_call) %>% 
    head(4)


# --- data for join ----

brand<-tribble( ~name, ~brand_,
                "Paul", "Mazda",
                "Sue", "Toyota",
                "Mary", "Honda",
                "Patty", "Honda")
brand

type<-tribble( ~name, ~type_,  ~ class,  ~ size,
               "Mary", "JAZZ", "hash back", 1,
               "Patty", "CIVIC","sedan", 2,
               "John", "CAMRY","sedan",3)
type

str(brand)
str(type)
# --- left_join ----
brand %>% left_join(type,by = "name")

brand %>% left_join(type,class,by = "name")    # unable to select col
brand %>% left_join(type,c(size,class),by = "name") # unable to set seq.

# --- right_join ----

brand %>% right_join(type,by = "name")


# --- full_join ----

brand %>% full_join(type, by = "name")

# --- inner_join ----

brand %>% inner_join(type, by = "name")


# --- dataframe: profileframe ----


p_frame <- read_csv(
    "https://github.com/kseksan/Credit-Scoring/raw/master/profileframe.csv",
    col_types = cols(
        id = col_factor(),
        phonenum = col_factor(),
        paytype = col_factor(),
        province = col_factor()
    ),
    col_names = TRUE
)
    
    
p_frame <- as_tibble(p_frame)
p_frame
summary(p_frame)



# application - call statistics ----
# join 2 df : callingnum == phonenum

cdr %>% 
    mutate(date = str_sub(timestamp,1,10)) %>% 
    group_by(callingnum) %>% 
    summarize(totalcalls = n(),
              ncallednum = n_distinct(callednum),
              meandur = mean(duration),
              nday = n_distinct(date)) %>% 
    mutate(callsperday = totalcalls/nday) %>% 
    select(callingnum, ncallednum, callsperday, meandur) %>% 
    inner_join(p_frame, by = c("callingnum"="phonenum")) %>% 
    select(id,ncallednum, callsperday,meandur) -> 
    cdrstatframe

cdrstatframe %>% head(4)

# --- Exercise - add new col ----
cdr %>% 
    mutate(date = str_sub(timestamp,1,10)) %>% 
    group_by(callingnum) %>% 
    summarize(totalcalls = n(),
              ncallednum = n_distinct(callednum),
              sddur = sd(duration),
              nday = n_distinct(date)) %>% 
    mutate(callsperday = totalcalls/nday) %>% 
    select(callingnum, ncallednum, callsperday, sddur) %>% 
    inner_join(p_frame, by = c("callingnum"="phonenum")) %>% 
    select(id,ncallednum, callsperday,sddur) -> 
    cdrstatframe_sd

cdrstatframe_sd %>% head(4)


# credit scoring with CDR ----
# concept: split train_test data

# create df

loandata <- read_csv(
    "https://github.com/kseksan/Credit-Scoring/raw/master/loandata.csv",
    col_types = cols(
        ID = col_factor(),
        LStatus = col_factor()
        ),
    col_names = TRUE
)


loandata <- as_tibble(loandata)
loandata %>% head(4)

names(loandata)

# join with another df: cdrstatframe

loandata %>% 
    inner_join(cdrstatframe,by = c("ID"="id"))  ->   # order-sensitive
    phoneloandata
names(phoneloandata)





# build model and validate

###Spit fit data 60% and validate 40%
set.seed(123)

trainindex <- sample((1:nrow(phoneloandata)),nrow(phoneloandata)*0.6)
phonedatatrain <- phoneloandata[trainindex,c(2,8:21)]
phonedatavalid <- phoneloandata[-trainindex,c(2,8:21)]


###Fit model small
fitmodelsmall <- glm(LStatus ~ Age + AGender + AHousing,
                   family=binomial(link=logit),data = phonedatatrain)


# pdsmallvec <- predict.glm(fitmodelsmall, newdata = phonedatavalid,type="response")
pdsmallvec <- fitmodelsmall %>% predict.glm(newdata = phonedatavalid,type="response")    # **** exercise ****


###Fit model phone
fitmodelphone <- glm(LStatus ~ Age + AGender + AHousing + ncallednum + callsperday + meandur,
                   family=binomial(link=logit),data=phonedatatrain)

# pdphonevec <- predict.glm(fitmodelphone, newdata = phonedatavalid,type="response")
pdphonevec <- fitmodelphone %>% predict.glm(newdata = phonedatavalid,type="response")    # **** exercise ****


###ROC plot between pdsmall and pdphone

library(pROC)

roc1 <- roc(phonedatavalid$LStatus ~ pdsmallvec, percent=TRUE, plot=TRUE,
          print.auc=TRUE, col=4, auc.polygon=TRUE, print.auc.y=30);

roc2 <- roc(phonedatavalid$LStatus ~ pdphonevec, percent=TRUE, plot=TRUE,
          
          print.auc=TRUE, col=2, add = TRUE);

legend("topleft",c("Small Model", "Phone Model"),col=c("blue","red"),lty = 1)



# --- exercise: apply  %>%  ---- 
# see above  **** exercise ****


