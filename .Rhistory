a <- seq(1,10)
a
class(a)
objects()  # call current object
ls()    # call current object
objects()  # call current object
ls()    # call current object
rm(a)    # remove object
rm(list = ls())    # remove everything
getwd()
# chapter 5 ----
rm(list=ls())   # clear environment
library(gapminder)
library(tidyverse)
str(gapminder)    # gapminder: example of tibble
head(gapminder)
gapminder %>% select(country)  %>% unique()  %>% count()
class(gapminder)
gapminder %>% head()
head(gapminder)
gapminder %>% tail(3)
iris
class(iris)   # conventional dataframe,not tibble
iris %>% as_tibble()  ->  iris_tibble
class(iris_tibble)    # tibble
names(iris_tibble)
iris %>% ncol()
iris %>% nrow()
iris_tibble %>% ncol()    # no of col
iris %>% length()    # no of col
iris %>% length()    # no of col
gapminder %>% length()
str(iris_tibble)
str(iris)
dim(gapminder)
dim(iris)
dim(iris_tibble)
summary(gapminder)
summary(iris)
summary(iris_tibble)
iris_tibble %>% summary()
# plot(X, y, type, col, main, xlab, ylab)
plot(lifeExp ~ year, gapminder)
plot(lifeExp ~ year, data = gapminder)
plot(lifeExp ~ gdpPercap, gapminder)
plot(lifeExp ~ log(gdpPercap), gapminder)
head(gapminder$lifeExp)    # return as vector
gapminder %>% select(lifeExp) %>% head()    # return as df
head(gapminder$lifeExp)  %>% plot()    # scatter: auto index x
library(ISLR)
install.packages(ISLR)
install.packages('ISLR')
library(ISLR)
# location estimate ----
state  <- read.csv('state.csv')
mean(state[['Population']])
mean(state[['Population']],trim=0.1)
# location estimate ----
ls()
# location estimate ----
pwd()
# location estimate ----
wd()
# location estimate ----
getwd()
getwd()
setwd("~/000_DataScience/01_R/02DS_CU/99_545")
getwd()
a <- seq(1,10)
a
class(a)
objects()  # call current object
objects()  # call current object
ls()    # call current object
rm(a)    # remove object
rm(list = ls())    # remove everything
getwd()
# chapter 5 ----
rm(list=ls())   # clear environment
library(gapminder)
library(tidyverse)
str(gapminder)    # gapminder: example of tibble
# --- assignment ----
a <- 1
a+2
b <- 2
a+b
a <- c(10,20,30)
# --- vector indexing----
a[1]
a[c(1,3)]
a <- c(10,20,30)
# --- vector indexing----
a[1]
a[1:3]
b <- c(4,5,6)
a+b
a*b
a^b
c <- rep(1,length=5)
d <- 1:5
e <- 1:10
# ~ start,stop,step
f <- seq(1,9, by=2)
f
g <- seq(1,9, length=2)
g
# --- Function ----
a
# --- Function ----
a
mean(a)
sd(a)
min(a)
# solution_in_sheet
aaa <- c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5)
bbb <- sort(rep(1:5,3))
# --- Matrix ----
A  <- matrix(1:6, nrow=2)
A
B <- matrix(1:6, ncol=3)
A_new <- matrix(1:6, nrow=2, byrow ='TRUE')
A_new
A_new2 <- matrix(1:6, nrow=2, byrow = 1)
A_new2
C
# 1D matrix or vector
D <- matrix(1:6)
D
# matrix(value,row,col)
C <- matrix(1,3,3)
C
# 1D matrix or vector
D <- matrix(1:6)
D
I2  <- diag(nrow=2)
I2
I3 <- diag(3)
I3
dim(I2)
dim(I3)
dim(B)
dim(D)
# --- Matrix Transpose and Indexing----
A_T <- t(A)
A_T
D_T <- t(D)
D_T
A_T[3,1]
A_T[,2]    # take all column @index2
A_T[1,]    # take all row @index1
A_T
# question: how to subset matrix i.e. [[3,4],[5,6]]
sub1 <-  A_T[c(1,3),]
sub1
library()
library(lib.loc = .Library)
# location estimate ----
getwd()
state  <- read.csv('state.csv')
mean(state[['Population']])
mean(state[['Population']],trim=0.1)
median(state[['Population']])
weighted.mean(state[['Murder.Rate']],w=state[['Population']])
library('matrixStats')
weightedMedian(state[['Murder.Rate']],w=state[['Population']])
sd(state[['Population']])
IQR(state[['Population']])
